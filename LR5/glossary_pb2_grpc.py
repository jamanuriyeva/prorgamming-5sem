# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import glossary_pb2 as glossary__pb2


class GlossaryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTerm = channel.unary_unary(
                '/glossary.GlossaryService/GetTerm',
                request_serializer=glossary__pb2.GetTermRequest.SerializeToString,
                response_deserializer=glossary__pb2.TermResponse.FromString,
                )
        self.SearchTerms = channel.unary_unary(
                '/glossary.GlossaryService/SearchTerms',
                request_serializer=glossary__pb2.SearchTermsRequest.SerializeToString,
                response_deserializer=glossary__pb2.SearchTermsResponse.FromString,
                )
        self.AddTerm = channel.unary_unary(
                '/glossary.GlossaryService/AddTerm',
                request_serializer=glossary__pb2.AddTermRequest.SerializeToString,
                response_deserializer=glossary__pb2.OperationResponse.FromString,
                )
        self.UpdateTerm = channel.unary_unary(
                '/glossary.GlossaryService/UpdateTerm',
                request_serializer=glossary__pb2.UpdateTermRequest.SerializeToString,
                response_deserializer=glossary__pb2.OperationResponse.FromString,
                )
        self.DeleteTerm = channel.unary_unary(
                '/glossary.GlossaryService/DeleteTerm',
                request_serializer=glossary__pb2.DeleteTermRequest.SerializeToString,
                response_deserializer=glossary__pb2.OperationResponse.FromString,
                )
        self.ListAllTerms = channel.unary_unary(
                '/glossary.GlossaryService/ListAllTerms',
                request_serializer=glossary__pb2.ListAllRequest.SerializeToString,
                response_deserializer=glossary__pb2.ListAllResponse.FromString,
                )


class GlossaryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTerm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchTerms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTerm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTerm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTerm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllTerms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GlossaryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTerm,
                    request_deserializer=glossary__pb2.GetTermRequest.FromString,
                    response_serializer=glossary__pb2.TermResponse.SerializeToString,
            ),
            'SearchTerms': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchTerms,
                    request_deserializer=glossary__pb2.SearchTermsRequest.FromString,
                    response_serializer=glossary__pb2.SearchTermsResponse.SerializeToString,
            ),
            'AddTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTerm,
                    request_deserializer=glossary__pb2.AddTermRequest.FromString,
                    response_serializer=glossary__pb2.OperationResponse.SerializeToString,
            ),
            'UpdateTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTerm,
                    request_deserializer=glossary__pb2.UpdateTermRequest.FromString,
                    response_serializer=glossary__pb2.OperationResponse.SerializeToString,
            ),
            'DeleteTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTerm,
                    request_deserializer=glossary__pb2.DeleteTermRequest.FromString,
                    response_serializer=glossary__pb2.OperationResponse.SerializeToString,
            ),
            'ListAllTerms': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllTerms,
                    request_deserializer=glossary__pb2.ListAllRequest.FromString,
                    response_serializer=glossary__pb2.ListAllResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'glossary.GlossaryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GlossaryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glossary.GlossaryService/GetTerm',
            glossary__pb2.GetTermRequest.SerializeToString,
            glossary__pb2.TermResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchTerms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glossary.GlossaryService/SearchTerms',
            glossary__pb2.SearchTermsRequest.SerializeToString,
            glossary__pb2.SearchTermsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glossary.GlossaryService/AddTerm',
            glossary__pb2.AddTermRequest.SerializeToString,
            glossary__pb2.OperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glossary.GlossaryService/UpdateTerm',
            glossary__pb2.UpdateTermRequest.SerializeToString,
            glossary__pb2.OperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glossary.GlossaryService/DeleteTerm',
            glossary__pb2.DeleteTermRequest.SerializeToString,
            glossary__pb2.OperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllTerms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glossary.GlossaryService/ListAllTerms',
            glossary__pb2.ListAllRequest.SerializeToString,
            glossary__pb2.ListAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
